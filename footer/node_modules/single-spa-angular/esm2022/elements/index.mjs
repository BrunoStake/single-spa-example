import { getContainerElementAndSetTemplate, } from 'single-spa-angular/internals';
const defaultOptions = {
    element: null,
    template: null,
    ngModuleRefOrAppRef: null,
    bootstrapFunction: null,
    domElementGetter: undefined,
};
async function bootstrap(options, props) {
    if (options.ngModuleRefOrAppRef !== null) {
        return;
    }
    // We call `bootstrapFunction()` inside the bootstrap lifecycle hook
    // because Angular modules that expose custom elements should be
    // bootstrapped only once.
    options.ngModuleRefOrAppRef = await options.bootstrapFunction(props);
}
async function mount(options, props) {
    const containerElement = getContainerElementAndSetTemplate(options, props);
    // `options.template` which can be `<app-element />` is not a valid selector
    // for `document.querySelector`, thus we retrieve this custom element
    // via this property.
    options.element = containerElement.firstElementChild;
}
function unmount(options) {
    return Promise.resolve().then(() => {
        // Removing custom element from DOM is enough since it will trigger
        // `disconnectedCallback()` and Angular will dispose all resources.
        options.element.parentElement.removeChild(options.element);
        options.element = null;
    });
}
export function singleSpaAngularElements(userOptions) {
    const options = {
        ...defaultOptions,
        ...userOptions,
    };
    return {
        bootstrap: bootstrap.bind(null, options),
        mount: mount.bind(null, options),
        unmount: unmount.bind(null, options),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWJzL3NpbmdsZS1zcGEtYW5ndWxhci9lbGVtZW50cy9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUVMLGlDQUFpQyxHQUNsQyxNQUFNLDhCQUE4QixDQUFDO0FBSXRDLE1BQU0sY0FBYyxHQUFnRDtJQUNsRSxPQUFPLEVBQUUsSUFBSTtJQUNiLFFBQVEsRUFBRSxJQUFLO0lBQ2YsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QixpQkFBaUIsRUFBRSxJQUFLO0lBQ3hCLGdCQUFnQixFQUFFLFNBQVM7Q0FDNUIsQ0FBQztBQUVGLEtBQUssVUFBVSxTQUFTLENBQUMsT0FBb0QsRUFBRSxLQUFVO0lBQ3ZGLElBQUksT0FBTyxDQUFDLG1CQUFtQixLQUFLLElBQUksRUFBRTtRQUN4QyxPQUFPO0tBQ1I7SUFFRCxvRUFBb0U7SUFDcEUsZ0VBQWdFO0lBQ2hFLDBCQUEwQjtJQUMxQixPQUFPLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsT0FBb0QsRUFBRSxLQUFVO0lBQ25GLE1BQU0sZ0JBQWdCLEdBQUcsaUNBQWlDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNFLDRFQUE0RTtJQUM1RSxxRUFBcUU7SUFDckUscUJBQXFCO0lBQ3JCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsaUJBQThCLENBQUM7QUFDcEUsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLE9BQW9EO0lBQ25FLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDakMsbUVBQW1FO1FBQ25FLG1FQUFtRTtRQUNuRSxPQUFPLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQVEsQ0FBQyxDQUFDO1FBQzlELE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxXQUF3QztJQUMvRSxNQUFNLE9BQU8sR0FBZ0Q7UUFDM0QsR0FBRyxjQUFjO1FBQ2pCLEdBQUcsV0FBVztLQUNmLENBQUM7SUFFRixPQUFPO1FBQ0wsU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztRQUN4QyxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1FBQ2hDLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7S0FDckMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExpZmVDeWNsZXMgfSBmcm9tICdzaW5nbGUtc3BhJztcbmltcG9ydCB0eXBlIHsgTmdFbGVtZW50IH0gZnJvbSAnQGFuZ3VsYXIvZWxlbWVudHMnO1xuaW1wb3J0IHtcbiAgQmFzZVNpbmdsZVNwYUFuZ3VsYXJPcHRpb25zLFxuICBnZXRDb250YWluZXJFbGVtZW50QW5kU2V0VGVtcGxhdGUsXG59IGZyb20gJ3NpbmdsZS1zcGEtYW5ndWxhci9pbnRlcm5hbHMnO1xuXG5pbXBvcnQgeyBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zID0ge1xuICBlbGVtZW50OiBudWxsLFxuICB0ZW1wbGF0ZTogbnVsbCEsXG4gIG5nTW9kdWxlUmVmT3JBcHBSZWY6IG51bGwsXG4gIGJvb3RzdHJhcEZ1bmN0aW9uOiBudWxsISxcbiAgZG9tRWxlbWVudEdldHRlcjogdW5kZWZpbmVkLFxufTtcblxuYXN5bmMgZnVuY3Rpb24gYm9vdHN0cmFwKG9wdGlvbnM6IEJvb3RzdHJhcHBlZFNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50c09wdGlvbnMsIHByb3BzOiBhbnkpIHtcbiAgaWYgKG9wdGlvbnMubmdNb2R1bGVSZWZPckFwcFJlZiAhPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIGNhbGwgYGJvb3RzdHJhcEZ1bmN0aW9uKClgIGluc2lkZSB0aGUgYm9vdHN0cmFwIGxpZmVjeWNsZSBob29rXG4gIC8vIGJlY2F1c2UgQW5ndWxhciBtb2R1bGVzIHRoYXQgZXhwb3NlIGN1c3RvbSBlbGVtZW50cyBzaG91bGQgYmVcbiAgLy8gYm9vdHN0cmFwcGVkIG9ubHkgb25jZS5cbiAgb3B0aW9ucy5uZ01vZHVsZVJlZk9yQXBwUmVmID0gYXdhaXQgb3B0aW9ucy5ib290c3RyYXBGdW5jdGlvbihwcm9wcyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1vdW50KG9wdGlvbnM6IEJvb3RzdHJhcHBlZFNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50c09wdGlvbnMsIHByb3BzOiBhbnkpIHtcbiAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IGdldENvbnRhaW5lckVsZW1lbnRBbmRTZXRUZW1wbGF0ZShvcHRpb25zLCBwcm9wcyk7XG4gIC8vIGBvcHRpb25zLnRlbXBsYXRlYCB3aGljaCBjYW4gYmUgYDxhcHAtZWxlbWVudCAvPmAgaXMgbm90IGEgdmFsaWQgc2VsZWN0b3JcbiAgLy8gZm9yIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCwgdGh1cyB3ZSByZXRyaWV2ZSB0aGlzIGN1c3RvbSBlbGVtZW50XG4gIC8vIHZpYSB0aGlzIHByb3BlcnR5LlxuICBvcHRpb25zLmVsZW1lbnQgPSBjb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkIGFzIE5nRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gdW5tb3VudChvcHRpb25zOiBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAvLyBSZW1vdmluZyBjdXN0b20gZWxlbWVudCBmcm9tIERPTSBpcyBlbm91Z2ggc2luY2UgaXQgd2lsbCB0cmlnZ2VyXG4gICAgLy8gYGRpc2Nvbm5lY3RlZENhbGxiYWNrKClgIGFuZCBBbmd1bGFyIHdpbGwgZGlzcG9zZSBhbGwgcmVzb3VyY2VzLlxuICAgIG9wdGlvbnMuZWxlbWVudCEucGFyZW50RWxlbWVudCEucmVtb3ZlQ2hpbGQob3B0aW9ucy5lbGVtZW50ISk7XG4gICAgb3B0aW9ucy5lbGVtZW50ID0gbnVsbDtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGVTcGFBbmd1bGFyRWxlbWVudHModXNlck9wdGlvbnM6IEJhc2VTaW5nbGVTcGFBbmd1bGFyT3B0aW9ucyk6IExpZmVDeWNsZXMge1xuICBjb25zdCBvcHRpb25zOiBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zID0ge1xuICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgIC4uLnVzZXJPcHRpb25zLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYm9vdHN0cmFwOiBib290c3RyYXAuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICBtb3VudDogbW91bnQuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICB1bm1vdW50OiB1bm1vdW50LmJpbmQobnVsbCwgb3B0aW9ucyksXG4gIH07XG59XG4iXX0=